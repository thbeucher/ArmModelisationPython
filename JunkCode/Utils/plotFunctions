plt.figure()
    xyt = fr.recup_pos_ini("/home/beucher/workspace/Data/TrajectoireTest/")
    xt, yt = [], []
    for el in xyt.values():
        xt.append(el[0])
        yt.append(el[1])
    plt.scatter(xt, yt, c = 'b')
    plt.figure()
    xytt = fr.recup_pos_ini("/home/beucher/workspace/Data/TrajectoireTest/oldTraj/")
    xtt, ytt = [], []
    for el in xytt.values():
        xtt.append(el[0])
        ytt.append(el[1])
    plt.scatter(xtt, ytt, c = 'b')
    plt.show(block = True)
    
    ptsdif = []
    for el in xytt:
        for el1 in xy:
            if el == el1:
                ptsdif.append(el)
    for el in os.listdir("/home/beucher/workspace/Data/TrajectoireTest/oldTraj/"):
        i = 0
        for el1 in ptsdif:
            if el == el1:
                i += 1
        if i == 0:
            copyfile("/home/beucher/workspace/Data/TrajectoireTest/oldTraj/"+el, "/home/beucher/workspace/recupTraj/"+el)


#Pour supprimer des points trop rapproch√©s (pts de depart des trajectoires)
for el in xyt:
        for el1 in xyt:
            a = abs(xyt[el][0] - xyt[el1][0])
            b = abs(xyt[el][1] - xyt[el1][1])
            if a < 0.02 and a != 0 and b < 0.02 and b != 0:
                remove("/home/beucher/workspace/recupTraj/"+el)



    toRemove = []
    for el in xyt:
        tt = 0
        for el1 in xy:
            a = abs(xyt[el][0] - xy[el1][0])
            b = abs(xyt[el][1] - xy[el1][1])
            if a < 0.015 and a != 0 and b < 0.015 and b != 0:
                print(el, el1)
                if tt == 0:
                    toRemove.append(el)
                    tt += 1
    print(len(toRemove))
    #for el in toRemove:
        #remove("/home/beucher/workspace/recupTraj/"+el)





#ch = input("Voulez vous afficher les activations musculaires avec bruit?(Y or N): ")
'''trajIteU = {}
        trajVal = {}
        for i in range(6*12):
            trajVal[i] = []
        u = 0
        for i in range(12):
            trajIteU[i] = []
            if ch == "N":
                nameU = "RBFN2/" + str(nbfeat) + "feats/MuscularActivation/ActiMuscuTrajectoireX" + str(i+1)
            elif ch == "Y":
                nameU = "RBFN2/" + str(nbfeat) + "feats/MuscularActivation/ActiMuscuNoiseTrajectoireX" + str(i+1)
            ut1 = fr.getobjread(nameU)
            for j in range(len(ut1)):
                trajIteU[i].append(j)
                for t in range(6):
                    trajVal[t+u].append(ut1[j][t])
            u += 6
        u = 0
        for i in range(12):
            rbfn = plt.Figure()
            for j in range(6):
                plt.plot(trajIteU[i], trajVal[j+u])
            u += 6
            plt.show(block = True)'''





'''
    #verifie si les trajectoires d'entrainement comprenne les trajectoires d'experimentation
    a = 0
    for el in xy:
        for i in range(len(x0)):
            if el[0] == x0[i] and el[1] == y0[i]:
                a += 1
    print(a)'''
    '''xyt = fr.recup_pos_ini("/home/beucher/workspace/recupTraj/")
    xtt, ytt = [], []
    for el in xyt.values():
        xtt.append(el[0])
        ytt.append(el[1])'''



'''fr = FileReading()
rs = ReadSetupFile()
traj, junk = fr.recup_pos_ini(rs.pathFolderData + "ThetaAllTraj/")
trajx, trajy, tx, ty, k, ksupr = [], [], [], [], [], []
for key1, el1 in traj.items():
    trajx.append(el1[0])
    trajy.append(el1[1])
    for key2, el2 in traj.items():
        a = abs(el1[0] - el2[0])
        b = abs(el1[1] - el2[1])
        if el1[0] == el2[0] and el1[1] == el2[1] and key2 != key1:
            print("la", key1, key2)
        if a < 0.008 and b < 0.008 and key2 != key1:
            if key1 not in k:
                print("ic", key1, key2)
                k.append(key1)
                k.append(key2)
                tx.append(el2[0])
                ty.append(el2[1])
                ksupr.append(key1)
#for el in ksupr:
    #remove(rs.pathFolderData + "ThetaAllTraj/" + el)

plt.figure()
plt.scatter(trajx, trajy, c = 'b')
plt.scatter(tx, ty, c = 'r')
plt.show()'''








