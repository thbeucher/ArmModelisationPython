import numpy as np


class fa_lwr():
    
    def __init__(self, nbFeature = 10):
        self.nbFeat = nbFeature
    
    ######################################################################################
    ## Fonction d'apprentissage pour la regression                                      ##      
    ######################################################################################
    def train_LWR(self, data):
        c = 1
    
    ######################################################################################
    ## Fonction pour fixer les centres et les sigmas des gaussiennes utilisees          ##      
    ######################################################################################
    def setCentersAndWidths(self):
        self.centersPP1 = 0
        self.centersPP2 = 0
        self.centersP1 = 0
        self.centersP2 = 0
        self.widths = 0
    
    ######################################################################################
    ## Fonction pour calculer le poids de chaque input par des gaussiennes              ##      
    ######################################################################################    
    def getWeight(self, input):
        W = np.exp(-(np.divide(np.square(input[0] - self.centersPP1), 2*self.widths**2) 
        + np.divide(np.square(input[1] - self.centersPP2), 2*self.widths**2)
        + np.divide(np.square(input[2] - self.centersPP2), 2*self.widths**2)
        + np.divide(np.square(input[3] - self.centersP1), 2*self.widths**2)))
        return W
        
    ######################################################################################
    ## Fonction pour calculer la sortie des features selon l'input                      ##      
    ######################################################################################   
    def featureOutput(self, input):     
        phi = np.vstack(([input], [1]))
        return phi
        
        
        
        