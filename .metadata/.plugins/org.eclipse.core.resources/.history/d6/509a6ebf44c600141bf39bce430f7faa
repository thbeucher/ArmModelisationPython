import pickle
import ArmModel.ParametresRobot as pr
import numpy as np
import math as ma
import cma as cma

#target(4) estimated_state(4) actual_state(4) noised_command(6) command(6) estimated_next_state(4) 
#actual_next_state(4) next_acceleration(2)
#Recuperation des donnees du fichier dans une matrice
def recup_data():
    chemin = "/home/beucher/workspace/ArmModelPython/ArmModel/trajectoires/trajectoire"
    nbFichier = input("Veuillez entrer le nombre de fichier à traiter: ")
    nbFichier = int(nbFichier)
    j = 0
    data_store = {}
    while j < nbFichier:
        mat = np.loadtxt(chemin + str(j+1) + ".log")
        i = 0
        k = 0
        state = []
        command = []
        while i < mat.size/34:
            state.append((mat[i][k+8], mat[i][k+9], mat[i][k+10], mat[i][k+11]))
            command.append((mat[i][k+18], mat[i][k+19], mat[i][k+20], mat[i][k+21]))
            i += 1
        data_store[str("trajectoire" + str(j+1) + "_state")] = state
        data_store[str("trajectoire" + str(j+1) + "_command")] = command
        j += 1
    f = lambda col:col[2]
    print(len(data_store))
    print(len(data_store["trajectoire1_state"]))
    print(len(data_store["trajectoire1_command"]))
    
recup_data()


###########################################################################################
#La suite de ce code permet de récupérer q1 et q2 à partir du x et du y de la main
###########################################################################################
'''def convertToAngle(xh, yh, robot):
    if (xh**2+yh**2-robot.l1**2-robot.l2**2)/(2*robot.l1*robot.l2) < -1:
        q2 = np.arccos(1)
    else:
        q2 = np.arccos((xh**2+yh**2-robot.l1**2-robot.l2**2)/(2*robot.l1*robot.l2))
    q1 = ma.atan2(yh, xh)-ma.atan2(robot.l2*np.sin(q2), robot.l1 + robot.l2*np.cos(q2))
    return q1, q2

coord = [(-0.2,0.39)]
coord.append((-0.1,0.39))
coord.append((0.,0.39))
coord.append((0.1,0.39))
coord.append((0.2,0.39))
coord.append((-0.3,0.0325))
coord.append((-0.2,0.0325))
coord.append((-0.1,0.0325))
coord.append((0.,0.0325))
coord.append((0.1,0.0325))
coord.append((0.2,0.0325))
coord.append((0.3,0.0325))
coord.append((0.,0.6175))

f = lambda col: col[0]
g = lambda col: col[1]
print(f(coord[0]))

angle = []
robot = pr.ParametresRobot()
for el in coord:
    q1, q2 = convertToAngle(el[0], el[1], robot)
    angle.append((q1,q2))
print(angle)

monfichier = open("q1q2pourChaqueXhYh","w")
i = 0
for el1 in coord:
    monfichier.write(str(i+1) + "-Coordonnees: (xh=" + str(el1[0]) + ",yh=" + str(el1[1]) + ") et angle du bras associés: (p1=" + str(f(angle[i])) + ",p2=" + str(g(angle[i])) + ")\n")
    i += 1
monfichier.close()

monFichierAjout = open("q1q2pourChaqueXhYh","a")
for el in angle:
    monFichierAjout.write("{" + str(el[0]) + "," + str(el[1]) + "},")
monFichierAjout.close()

print(ma.atan2(2, 1))'''






