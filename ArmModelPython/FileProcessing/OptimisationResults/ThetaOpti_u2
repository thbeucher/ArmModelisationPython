{'maxstd': 'inf  #v maximal std in any coordinate direction', 'verb_log': '1  #v verbosity: write data to files every verb_log iteration, writing can be time critical on fast to evaluate functions', 'CMA_teststds': 'None  # factors for non-isotropic initial distr. of C, mainly for test purpose, see CMA_stds for production', 'tolstagnation': 'int(100 + 100 * N**1.5 / popsize)  #v termination if no improvement over tolstagnation iterations', 'signals_filename': 'cmaes_signals.par  # read from this file, e.g. "stop now"', 'verb_time': 'True  #v output timings on console', 'vv': '0  #? versatile variable for hacking purposes, value found in self.opts["vv"]', 'ftarget': '-inf  #v target function value, minimization', 'boundary_handling': 'BoundTransform  # or BoundPenalty, unused when ``bounds in (None, [None, None])``', 'CSA_squared': 'False  #v use squared length for sigma-adaptation ', 'seed': 'None  # random number seed', 'CMA_stds': 'None  # multipliers for sigma0 in each coordinate, not represented in C, makes scaling_of_variables obsolete', 'tolfun': '1e-11  #v termination criterion: tolerance in function value, quite useful', 'termination_callback': 'None  #v a function returning True for termination, called after each iteration step and could be abused for side effects', 'CMA_const_trace': 'False  # normalize trace, value CMA_const_trace=2 normalizes sum log eigenvalues to zero', 'CMA_rankmualpha': '0.3  # factor of rank-mu update if mu=1, subject to removal, default might change to 0.0', 'CMA_elitist': 'False  #v or "initial" or True, elitism likely impairs global search performance', 'tolfunhist': '1e-12  #v termination criterion: tolerance in function value history', 'popsize': '4+int(3*log(N))  # population size, AKA lambda, number of new solution per iteration', 'CMA_sample_on_sphere_surface': 'False  #v all mutation vectors have the same length', 'maxiter': '100 + 50 * (N+3)**2 // popsize**0.5  #v maximum number of iterations', 'CMA_rankmu': 'True  # False or 0 for omitting rank-mu update of covariance matrix', 'AdaptSigma': 'CMAAdaptSigmaCSA  # or any other CMAAdaptSigmaBase class e.g. CMAAdaptSigmaTPA', 'CMA_mu': 'None  # parents selection parameter, default is popsize // 2', 'verb_append': '0  # initial evaluation counter, if append, do not overwrite output files', 'CMA_eigenmethod': 'np.linalg.eigh  # 0=numpy-s eigh, -1=pygsl, otherwise cma.Misc.eig (slower)', 'tolupsigma': '1e20  #v sigma/sigma0 > tolupsigma * max(sqrt(eivenvals(C))) indicates "creeping behavior" with usually minor improvements', 'CMA_mirrors': 'popsize < 6  # values <0.5 are interpreted as fraction, values >1 as numbers (rounded), otherwise about 0.16 is used', 'pc_line_samples': 'False #v two line samples along the evolution path pc', 'fixed_variables': 'None  # dictionary with index-value pairs like {0:1.1, 2:0.1} that are not optimized', 'typical_x': 'None  # used with scaling_of_variables', 'mean_shift_line_samples': 'False #v sample two new solutions colinear to previous mean shift', 'tolfacupx': '1e3  #v termination when step-size increases by tolfacupx (diverges). That is, the initial step-size was chosen far too small and better solutions were found far away from the initial solution x0', 'bounds': '[None, None]  # lower (=bounds[0]) and upper domain boundaries, each a scalar or a list/vector', 'mindx': '0  #v minimal std in any direction, cave interference with tol*', 'CSA_damp_mueff_exponent': '0.5  # zero would mean no dependency of damping on mueff, useful with CSA_disregard_length option', 'randn': 'np.random.standard_normal  #v randn((lam, N)) must return an np.array of shape (lam, N)', 'verbose': '1  #v verbosity e.v. of initial/final message, -1 is very quiet, -9 maximally quiet, not yet fully implemented', 'maxfevals': 'inf  #v maximum number of function evaluations', 'CMA_mirrormethod': '1  # 0=unconditional, 1=selective, 2==experimental', 'scaling_of_variables': 'None  # (rather use CMA_stds) scale for each variable, sigma0 is interpreted w.r.t. this scale, in that effective_sigma0 = sigma0*scaling. Internally the variables are divided by scaling_of_variables and sigma is unchanged, default is np.ones(N)', 'CMA_on': 'True  # False or 0 for no adaptation of the covariance matrix', 'transformation': 'None  # [t0, t1] are two mappings, t0 transforms solutions from CMA-representation to f-representation (tf_pheno), t1 is the (optional) back transformation, see class GenoPheno', 'is_feasible': 'is_feasible  #v a function that computes feasibility, by default lambda x, f: f not in (None, np.NaN)', 'CMA_active': 'True  # negative update, conducted after the original update', 'updatecovwait': 'None  #v number of iterations without distribution update, name is subject to future changes', 'CMA_cmean': '1  # learning rate for the mean value', 'CMA_diagonal': '0*100*N/sqrt(popsize)  # nb of iterations with diagonal covariance matrix, True for always', 'verb_disp': '100  #v verbosity: display console output every verb_disp iteration', 'CMA_dampsvec_fac': 'np.Inf  # tentative and subject to changes, 0.5 would be a "default" damping for sigma vector update', 'verb_plot': '0  #v in fmin(): plot() is called every verb_plot iteration', 'verb_filenameprefix': 'outcmaes  # output filenames prefix', 'tolx': '1e-11  #v termination criterion: tolerance in x-changes', 'CSA_clip_length_value': 'None  #v untested, [0, 0] means disregarding length completely', 'CSA_disregard_length': 'False  #v True is untested', 'CSA_dampfac': '1  #v positive multiplier for step-size damping, 0.3 is close to optimal on the sphere', 'minstd': '0  #v minimal std in any coordinate direction, cave interference with tol*', 'CMA_dampsvec_fade': '0.1  # tentative fading out parameter for sigma vector update'}