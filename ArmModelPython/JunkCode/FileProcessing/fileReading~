#################################################
######### Permet de récupérer xminmax ##########
###############################################
    def getxMinMax(self, nbfeat):
        folder = getcwd()
        folder = op.split(folder)
        folder = folder[0] + "/FileProcessing/RegressionResults/"
        folderNbFeat = folder + str(nbfeat) + "_feats/xMinMax"
        with open(folderNbFeat, "rb") as file:
            mondepickler = pickle.Unpickler(file)
            data = mondepickler.load()
        return data


#####################################################################################
Fonction pour mettre dans tes tableaux separes les differentes activations musculaires                      
#####################################################################################
    def tabActivationMuscu(self, nameFileTemp, commandAll = None, a = False):
        #Recuperation dans des tableaux des activations musculaires
        j = 0
        u1 = []
        u2 = []
        u3 = []
        u4 = []
        u5 = []
        u6 = []
        if a == True:    
            for el in commandAll:
                u1.append(el[0])
                u2.append(el[1])
                u3.append(el[2])
                u4.append(el[3])
                u5.append(el[4])
                u6.append(el[5])
        else:
            while j < len(self.data_store[str(nameFileTemp + "_command")]):
                u1.append(((self.data_store[str(nameFileTemp + "_command")])[j])[0])
                u2.append(((self.data_store[str(nameFileTemp + "_command")])[j])[1])
                u3.append(((self.data_store[str(nameFileTemp + "_command")])[j])[2])
                u4.append(((self.data_store[str(nameFileTemp + "_command")])[j])[3])
                u5.append(((self.data_store[str(nameFileTemp + "_command")])[j])[4])
                u6.append(((self.data_store[str(nameFileTemp + "_command")])[j])[5])
                j += 1
        #Rangement dans un dictionnaire des differents tableaux d'activations musculaires
        self.uCommand[str(nameFileTemp + "_u1")] = u1
        self.uCommand[str(nameFileTemp + "_u2")] = u2
        self.uCommand[str(nameFileTemp + "_u3")] = u3
        self.uCommand[str(nameFileTemp + "_u4")] = u4
        self.uCommand[str(nameFileTemp + "_u5")] = u5
        self.uCommand[str(nameFileTemp + "_u6")] = u6
    '''data_store = {}   
    data_store, nameFichier, nbFichier = recup_data()
    print(len(data_store))
    print(len(data_store[str(nameFichier + "1_state")]))
    print(len(data_store[str(nameFichier + "1_command")]))'''




    '''coord = [(-0.2,0.39)]
    coord.append((-0.1,0.39))
    coord.append((0.,0.39))
    coord.append((0.1,0.39))
    coord.append((0.2,0.39))
    coord.append((-0.3,0.0325))
    coord.append((-0.2,0.0325))
    coord.append((-0.1,0.0325))
    coord.append((0.,0.0325))
    coord.append((0.1,0.0325))
    coord.append((0.2,0.0325))
    coord.append((0.3,0.0325))
    coord.append((0.,0.6175))
    
    f = lambda col: col[0]
    g = lambda col: col[1]
    print(f(coord[0]))
    
    angle = []
    robot = pr.ParametresRobot()
    for el in coord:
        q1, q2 = convertToAngle(el[0], el[1], robot)
        angle.append((q1,q2))
    print(angle)
    
    monfichier = open("q1q2pourChaqueXhYh","w")
    i = 0
    for el1 in coord:
        monfichier.write(str(i+1) + "-Coordonnees: (xh=" + str(el1[0]) + ",yh=" + str(el1[1]) + ") et angle du bras associés: (p1=" + str(f(angle[i])) + ",p2=" + str(g(angle[i])) + ")\n")
        i += 1
    monfichier.close()
    
    monFichierAjout = open("q1q2pourChaqueXhYh","a")
    for el in angle:
        monFichierAjout.write("{" + str(el[0]) + "," + str(el[1]) + "},")
    monFichierAjout.close()
    
    print(ma.atan2(2, 1))'''




